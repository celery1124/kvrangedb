// Copyright (c) 2012 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef _filter_h_
#define _filter_h_

#include <fstream>
#include <iostream>
#include <strings.h>
#include "kvrangedb/slice.h"
#include "hash.h"
#include "kvrangedb/statistics.h"

namespace kvrangedb {

static uint64_t BloomHash(const Slice& key) {
  return MurmurHash64A(key.data(), key.size(), 0xbc9f1d34);
}

class BloomFilter {
 public:
  explicit BloomFilter(int bits_per_key) : bits_per_key_(bits_per_key) {
    // We intentionally round down to reduce probing cost a little bit
    k_ = static_cast<size_t>(bits_per_key * 0.69);  // 0.69 =~ ln(2)
    if (k_ < 1) k_ = 1;
    if (k_ > 30) k_ = 30;
  }

  void CreateFilter(const Slice* keys, int n, std::string* dst) const  {
    // Compute bloom filter size (in both bits and bytes)
    size_t bits = n * bits_per_key_;

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    if (bits < 64) bits = 64;

    size_t bytes = (bits + 7) / 8;
    bits = bytes * 8;

    const size_t init_size = dst->size();
    dst->resize(init_size + bytes, 0);
    dst->push_back(static_cast<char>(k_));  // Remember # of probes in filter
    char* array = &(*dst)[init_size];
    for (int i = 0; i < n; i++) {
      // Use double-hashing to generate a sequence of hash values.
      // See analysis in [Kirsch,Mitzenmacher 2006].
      uint64_t h = BloomHash(keys[i]);
      const uint64_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
      for (size_t j = 0; j < k_; j++) {
        const uint64_t bitpos = h % bits;
        array[bitpos / 8] |= (1 << (bitpos % 8));
        h += delta;
      }
    }
  }

  bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const  {
    const size_t len = bloom_filter.size();
    if (len < 2) return false;

    const char* array = bloom_filter.data();
    const size_t bits = (len - 1) * 8;

    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    const size_t k = array[len - 1];
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      return true;
    }

    uint64_t h = BloomHash(key);
    const uint64_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) {
      const uint64_t bitpos = h % bits;
      if ((array[bitpos / 8] & (1 << (bitpos % 8))) == 0) return false;
      h += delta;
    }
    return true;
  }

 private:
  size_t bits_per_key_;
  size_t k_;
};

class RangeFilter {
 public:
  RangeFilter() {};
  virtual ~RangeFilter() {};

  virtual std::string GenFilterName() = 0;
  virtual void LoadFilter(std::string filename) = 0;
  virtual void SaveFilter(std::string filename) = 0;
  virtual void InsertItem(const Slice& key) = 0;
  virtual bool KeyMayMatch(const Slice& key) = 0;
  virtual bool RangeMayMatch(const Slice& lkey, const Slice& hkey) = 0;

private:
  // No copying allowed
  RangeFilter(const RangeFilter&);
  void operator=(const RangeFilter&);
};

const BloomFilter* NewBloomFilter(int bits_per_key);

RangeFilter* NewHiBloomFilter(int bits_per_key, int bits_per_level, int levels, int exam_suffix_bits, int num_keys, int max_probes, Statistics *stats);
RangeFilter* NewRBloomFilter(int bits_per_key, int max_probes_bits, int num_keys, Statistics *stats);

}  // namespace kvrangedb

#endif